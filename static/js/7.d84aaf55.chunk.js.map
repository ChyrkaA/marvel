{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/singleElement/SingleElement.js","components/pages/SingleElementPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","_totalCharacters","_totalComicses","useMarvelService","useState","process","setProcess","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","getAllCharactersClear","nameStart","res","results","map","_transformCharacter","getAllCharacters","a","offset","total","getOneCharacters","id","getOneCharactersByName","name","getAllComicses","_transformComics","getOneComics","comics","title","price","prices","thumbnail","images","length","path","extension","homepage","urls","description","pages","pageCount","languages","textObjects","language","char","wiki","items","Skeleton","className","setContent","Component","Spinner","AppBanner","avengers","avengersLogo","View","navigate","useNavigate","Helmet","content","onClick","SingleElementPage","elementId","useParams","element","setElement","loading","error","useEffect","updateElement","onElementLoaded","item","then","SingleElement"],"mappings":"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","file":"static/js/7.d84aaf55.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n        return (\r\n                <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"img\" />\r\n        )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nlet _totalCharacters = 0;\r\nlet _totalComicses = 0;\r\n\r\n\r\nconst useMarvelService = () => {\r\n        const {request, clearError, process, setProcess} = useHttp();\r\n\r\n        const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n        const _apiKey = 'apikey=abf1ec76fa94d4d65de0b90e07426344';\r\n        const _baseOffset = 210;\r\n\r\n        const getAllCharactersClear = async (nameStart) => {\r\n                const res = await request(`${_apiBase}characters?nameStartsWith=${nameStart}&limit=100&${_apiKey}`);\r\n                return res.data.results.map(_transformCharacter);\r\n        }\r\n\r\n        const getAllCharacters = async (offset = _baseOffset) => {\r\n                const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n                _totalCharacters = res.data.total;\r\n                //console.log(_totalCharacters);\r\n                return res.data.results.map(_transformCharacter);\r\n        }\r\n\r\n        const getOneCharacters = async (id) => {\r\n                const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n                return _transformCharacter(res.data.results[0])\r\n        }\r\n\r\n        const getOneCharactersByName = async (name) => {\r\n                const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n                return _transformCharacter(res.data.results[0])\r\n        }\r\n\r\n        const getAllComicses = async (offset=0) => {\r\n                const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n                _totalComicses = res.data.total;\r\n                return res.data.results.map(_transformComics);\r\n        }\r\n\r\n        const getOneComics = async (id) => {\r\n                const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n                return _transformComics(res.data.results[0])\r\n        }\r\n\r\n        const _transformComics = (comics) => {\r\n                return{\r\n                        name: comics.title,\r\n                        price: comics.prices[0].price,\r\n                        id: comics.id,\r\n                        thumbnail: comics.images.length>0 ? comics.images[0].path+'.'+comics.images[0].extension : 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg',\r\n                        homepage: comics.urls[0].url,\r\n                        description: comics.description,\r\n                        pages: comics.pageCount,\r\n                        languages: comics.textObjects[0]?.language || 'en-US'\r\n                }\r\n        }\r\n\r\n        const _transformCharacter = (char) => {\r\n                return{\r\n                        name: char.name,\r\n                        description: char.description ,\r\n                        // ? (char.description.length > 200 ? char.description.slice(0,200)+'...' : char.description)  : 'No description',\r\n                        thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n                        homepage: char.urls[0].url,\r\n                        wiki: char.urls[1].url,\r\n                        id: char.id,\r\n                        comics: char.comics.items,\r\n                        total: char.total\r\n                }\r\n                // const charapter = {\r\n                //         name: char.name,\r\n                //         description: char.description,\r\n                //         thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n                //         homepage: char.urls[0].url,\r\n                //         wiki: char.urls[1].url\r\n                // }\r\n                // if (charapter.description.length>0 && charapter.description.length<200) {\r\n                //         return {...charapter}\r\n                // } else if (charapter.description.length>=200){\r\n                //         return {...charapter, description: charapter.description.slice(0,200)+'...'}\r\n                // } else {\r\n                //         return {...charapter, description: 'No description'}\r\n                // }\r\n        }\r\n\r\n        return {clearError, getAllCharacters, getOneCharacters, getAllComicses, getOneComics, getOneCharactersByName, getAllCharactersClear, process, setProcess}\r\n}\r\n\r\nexport default useMarvelService;\r\nexport {_totalCharacters, _totalComicses};","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n        \r\n        // const [loading, setLoading] = useState(false);\r\n        // const [error, setError] = useState(null);\r\n        const [process, setProcess] = useState('waiting')\r\n\r\n        const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n                // setLoading(true);\r\n                setProcess('loading');\r\n\r\n                try {\r\n                        const response = await fetch (url, {method, body, headers});\r\n\r\n                        if (!response.ok) {\r\n                                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n                        }\r\n\r\n                        const data = await response.json();\r\n\r\n                        // setLoading(false);\r\n\r\n                        return data;\r\n                } catch(e) {\r\n                        // setLoading(false);\r\n                        // setError(e.message);\r\n                        setProcess('error');\r\n                        throw e;\r\n                }\r\n        }, []);\r\n\r\n        const clearError = useCallback(() => {\r\n                // setError(null);\r\n                setProcess('loading');\r\n        }, [])\r\n\r\n        return {request, clearError, process, setProcess};\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <div>\n                <p className=\"char__select\">Please select a character to see information</p>\n                <div className=\"skeleton\">\n                    <div className=\"pulse skeleton__header\">\n                        <div className=\"pulse skeleton__circle\"></div>\n                        <div className=\"pulse skeleton__mini\"></div>\n                    </div>\n                    <div className=\"pulse skeleton__block\"></div>\n                    <div className=\"pulse skeleton__block\"></div>\n                    <div className=\"pulse skeleton__block\"></div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n        switch (process){\r\n                case 'waiting':\r\n                        return <Skeleton/>\r\n                case 'loading':\r\n                        return <Spinner/>\r\n                case 'confirmed':\r\n                        return <Component data={data}/>\r\n                case 'error':\r\n                        return <ErrorMessage/>\r\n                default:\r\n                        throw new Error('Unexpected process state')\r\n        }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useParams, useNavigate } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { Helmet } from 'react-helmet';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './singleElement.scss';\r\n\r\nconst SingleElementPage = () => {\r\n        const {elementId} = useParams();\r\n        const [element, setElement] = useState(null);\r\n\r\n        const {loading, error, clearError, getOneComics, getOneCharacters, process, setProcess} =  useMarvelService();\r\n\r\n        useEffect(()=>{\r\n                updateElement();\r\n        }, [elementId])\r\n\r\n        const onElementLoaded = (item) => {\r\n                setElement(element=>item);\r\n        }\r\n\r\n        const updateElement = () => {\r\n                if(!elementId){\r\n                        return\r\n                }\r\n                clearError();\r\n                if (elementId<1000000){\r\n                        getOneComics(elementId)\r\n                        .then(onElementLoaded)\r\n                        .then(()=>setProcess('confirmed'))\r\n                } else {\r\n                        getOneCharacters(elementId)\r\n                        .then(onElementLoaded)\r\n                        .then(()=>setProcess('confirmed'))\r\n                }\r\n\r\n        }\r\n\r\n        // const errorMessage = error ? <ErrorMessage/> : null;\r\n        // const spinner = loading ? <Spinner/> : null;\r\n        // const content = !(loading || error || !element) ? <View element={element}/> : null\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n                {setContent(process, View, element)}\r\n                {/* {errorMessage}\r\n                {spinner}\r\n                {content} */}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst View = ({data}) => {\r\n        const {name, description, pages, languages, price, thumbnail, id} = data;\r\n        const navigate = useNavigate();\r\n        return (\r\n                <>     \r\n                        <Helmet>\r\n                                <meta\r\n                                        name=\"description\"\r\n                                        content={`${name} comics book`}\r\n                                        />\r\n                                <title>{name}</title>\r\n                        </Helmet>                   \r\n                        <img src={thumbnail} alt={name} className=\"single-comic__img\"/>\r\n                        <div className=\"single-comic__info\">\r\n                                <h2 className=\"single-comic__name\">{name}</h2>\r\n                                <p className=\"single-comic__descr\">{description ? description : 'No description'}</p>\r\n                                {id<=1000000 ? <p className=\"single-comic__descr\">{pages ? pages + ' pages' : \"No information about the number of pages\"}</p> : null}\r\n                                {id<=1000000 ? <p className=\"single-comic__descr\">Language: {languages}</p> : null}\r\n                                {id<=1000000 ? <div className=\"single-comic__price\"> {price ? `Price: ${price}$`: 'Not aviable'}</div> : null}\r\n                        </div>\r\n                        <button className=\"button button__main\" onClick={()=>navigate(-1)}>\r\n                                <div className=\"inner\">Back to all {id <=1000000 ? 'comics' : 'charapters'}</div>\r\n                        </button> \r\n                </>\r\n            )\r\n\r\n}\r\n\r\nexport default SingleElementPage;","import AppBanner from \"../appBanner/AppBanner\";\r\nimport SingleElement from \"../singleElement/SingleElement\";\r\n\r\nconst SingleElementPage = () => {\r\n        return(\r\n                <>\r\n                        <AppBanner/>\r\n                        <SingleElement/>\r\n                </>\r\n        )\r\n}\r\n\r\nexport default SingleElementPage;"],"sourceRoot":""}