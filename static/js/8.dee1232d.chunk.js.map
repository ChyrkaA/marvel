{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","_totalCharacters","_totalComicses","useMarvelService","useState","process","setProcess","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","getAllCharactersClear","nameStart","res","results","map","_transformCharacter","getAllCharacters","a","offset","total","getOneCharacters","id","getOneCharactersByName","name","getAllComicses","_transformComics","getOneComics","comics","title","price","prices","thumbnail","images","length","path","extension","homepage","urls","description","pages","pageCount","languages","textObjects","language","char","wiki","items","AppBanner","className","avengers","avengersLogo","setContent","Component","newComicsesLoading","Spinner","ComicsList","comicses","setComics","setOffset","comicsEnd","setComicsEnd","setNewComicsesLoading","loading","error","useEffect","onRequest","initial","console","log","then","onComicsesLoaded","finally","newComicses","ended","comicsRefs","useRef","renderItems","arr","i","CSSTransition","timeout","Math","random","classNames","tabIndex","onFocus","current","focus","ref","el","end","to","TransitionGroup","component","disabled","onClick","ComicsPage","Helmet","content"],"mappings":"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","file":"static/js/8.dee1232d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n        return (\r\n                <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"img\" />\r\n        )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nlet _totalCharacters = 0;\r\nlet _totalComicses = 0;\r\n\r\n\r\nconst useMarvelService = () => {\r\n        const {request, clearError, process, setProcess} = useHttp();\r\n\r\n        const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n        const _apiKey = 'apikey=abf1ec76fa94d4d65de0b90e07426344';\r\n        const _baseOffset = 210;\r\n\r\n        const getAllCharactersClear = async (nameStart) => {\r\n                const res = await request(`${_apiBase}characters?nameStartsWith=${nameStart}&limit=100&${_apiKey}`);\r\n                return res.data.results.map(_transformCharacter);\r\n        }\r\n\r\n        const getAllCharacters = async (offset = _baseOffset) => {\r\n                const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n                _totalCharacters = res.data.total;\r\n                //console.log(_totalCharacters);\r\n                return res.data.results.map(_transformCharacter);\r\n        }\r\n\r\n        const getOneCharacters = async (id) => {\r\n                const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n                return _transformCharacter(res.data.results[0])\r\n        }\r\n\r\n        const getOneCharactersByName = async (name) => {\r\n                const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n                return _transformCharacter(res.data.results[0])\r\n        }\r\n\r\n        const getAllComicses = async (offset=0) => {\r\n                const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n                _totalComicses = res.data.total;\r\n                return res.data.results.map(_transformComics);\r\n        }\r\n\r\n        const getOneComics = async (id) => {\r\n                const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n                return _transformComics(res.data.results[0])\r\n        }\r\n\r\n        const _transformComics = (comics) => {\r\n                return{\r\n                        name: comics.title,\r\n                        price: comics.prices[0].price,\r\n                        id: comics.id,\r\n                        thumbnail: comics.images.length>0 ? comics.images[0].path+'.'+comics.images[0].extension : 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg',\r\n                        homepage: comics.urls[0].url,\r\n                        description: comics.description,\r\n                        pages: comics.pageCount,\r\n                        languages: comics.textObjects[0]?.language || 'en-US'\r\n                }\r\n        }\r\n\r\n        const _transformCharacter = (char) => {\r\n                return{\r\n                        name: char.name,\r\n                        description: char.description ,\r\n                        // ? (char.description.length > 200 ? char.description.slice(0,200)+'...' : char.description)  : 'No description',\r\n                        thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n                        homepage: char.urls[0].url,\r\n                        wiki: char.urls[1].url,\r\n                        id: char.id,\r\n                        comics: char.comics.items,\r\n                        total: char.total\r\n                }\r\n                // const charapter = {\r\n                //         name: char.name,\r\n                //         description: char.description,\r\n                //         thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n                //         homepage: char.urls[0].url,\r\n                //         wiki: char.urls[1].url\r\n                // }\r\n                // if (charapter.description.length>0 && charapter.description.length<200) {\r\n                //         return {...charapter}\r\n                // } else if (charapter.description.length>=200){\r\n                //         return {...charapter, description: charapter.description.slice(0,200)+'...'}\r\n                // } else {\r\n                //         return {...charapter, description: 'No description'}\r\n                // }\r\n        }\r\n\r\n        return {clearError, getAllCharacters, getOneCharacters, getAllComicses, getOneComics, getOneCharactersByName, getAllCharactersClear, process, setProcess}\r\n}\r\n\r\nexport default useMarvelService;\r\nexport {_totalCharacters, _totalComicses};","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n        \r\n        // const [loading, setLoading] = useState(false);\r\n        // const [error, setError] = useState(null);\r\n        const [process, setProcess] = useState('waiting')\r\n\r\n        const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n                // setLoading(true);\r\n                setProcess('loading');\r\n\r\n                try {\r\n                        const response = await fetch (url, {method, body, headers});\r\n\r\n                        if (!response.ok) {\r\n                                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n                        }\r\n\r\n                        const data = await response.json();\r\n\r\n                        // setLoading(false);\r\n\r\n                        return data;\r\n                } catch(e) {\r\n                        // setLoading(false);\r\n                        // setError(e.message);\r\n                        setProcess('error');\r\n                        throw e;\r\n                }\r\n        }, []);\r\n\r\n        const clearError = useCallback(() => {\r\n                // setError(null);\r\n                setProcess('loading');\r\n        }, [])\r\n\r\n        return {request, clearError, process, setProcess};\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import './comicsList.scss';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport { _totalComicses } from '../../services/MarvelService';\n\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst setContent = (process, Component, newComicsesLoading) => {\n    switch (process){\n            case 'waiting':\n                    return <Spinner/>\n            case 'loading':\n                    return newComicsesLoading ? <Component/> : <Spinner/>\n            case 'confirmed':\n                    return <Component/>\n            case 'error':\n                    return <ErrorMessage/>\n            default:\n                    throw new Error('Unexpected process state')\n    }\n}\n\nconst ComicsList = () => {\n\n    const [comicses, setComics] = useState([]);\n    const [offset, setOffset] = useState(200);\n    const [comicsEnd, setComicsEnd] = useState(false);\n    const [newComicsesLoading, setNewComicsesLoading] = useState(false)\n\n    const {loading, error, getAllComicses, process, setProcess} = useMarvelService();\n\n    useEffect(()=>{\n        onRequest(true)\n    }, [])\n\n    const onRequest = (initial=false) => {\n        initial ? setNewComicsesLoading(false) : setNewComicsesLoading(true);\n        console.log(newComicsesLoading)\n        getAllComicses(offset)\n            .then(onComicsesLoaded)\n            .then(()=>setProcess('confirmed'))\n            .finally(()=>setNewComicsesLoading(false))\n    }\n\n    const onComicsesLoaded = (newComicses) => {\n        let ended = _totalComicses-offset <= 8;\n        setComics(comicses=>[...comicses, ...newComicses]);\n        setOffset(offset=>offset+8);\n        setComicsEnd(ended);\n    }\n\n    let comicsRefs = useRef([]);\n\n    const onFocus = (i=0) => {\n        comicsRefs.current[i].focus();\n    }\n    \n    function renderItems(arr) {\n        const comics = arr.map(({name, price,id, thumbnail, homepage}, i) => {\n            price = price ? price + '$' : 'Not aviable ';\n            return(\n                <CSSTransition\n                    key={i}\n                    timeout={300+Math.random()*1000}\n                    classNames=\"comics__item\"\n                >\n                    <li \n                        tabIndex={i}\n                        onFocus = {()=>onFocus(i)}\n                        ref={el=>comicsRefs.current[i] = el}\n                        key={id}\n                        className=\"comics__item\">\n                            <NavLink end to={`/comics/${id}`}>\n                                <img src={thumbnail} alt={name} className=\"comics__item-img\"/>\n                                <div className=\"comics__item-name\">{name}</div>\n                                <div className=\"comics__item-price\">{price}</div>\n                            </NavLink>\n                    </li>\n                </CSSTransition>\n            )\n        })\n        return(\n            <ul className=\"comics__grid\">\n                <TransitionGroup component={null}>\n                    {comics}\n                </TransitionGroup>\n            </ul>\n        )\n    }    \n\n    // const items = renderItems(comicses);\n\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading && !newComicsesLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, ()=>renderItems(comicses), newComicsesLoading)}\n            {/* {errorMessage}\n            {spinner}\n            {items} */}\n            <button\n                disabled = {newComicsesLoading}\n                onClick={()=>onRequest()}\n                style={{'display': comicsEnd ? 'none' : 'block'}}\n                className=\"button button__main button__long\">\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\n\n\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\"\r\n\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst ComicsPage = () => {\r\n        return(\r\n                <>\r\n                        <Helmet>\r\n                                <meta\r\n                                        name=\"description\"\r\n                                        content=\"Page with list of our comics\"\r\n                                        />\r\n                                <title>Comics page</title>\r\n                        </Helmet>\r\n                        <AppBanner/>\r\n                        <ComicsList/>\r\n                </>\r\n        )\r\n}\r\n\r\nexport default ComicsPage;"],"sourceRoot":""}