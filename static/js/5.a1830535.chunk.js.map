{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/searchChar/SearchChar.js","components/findCharPanel/FindCharPanel.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","_totalCharacters","_totalComicses","useMarvelService","useState","process","setProcess","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","getAllCharactersClear","nameStart","res","results","map","_transformCharacter","getAllCharacters","a","offset","total","getOneCharacters","id","getOneCharactersByName","name","getAllComicses","_transformComics","getOneComics","comics","title","price","prices","thumbnail","images","length","path","extension","homepage","urls","description","pages","pageCount","languages","textObjects","language","char","wiki","items","Skeleton","className","setContent","Component","Spinner","View","clazzThumb","slice","href","RandomChar","setChar","useEffect","updateChar","loading","error","onCharLoaded","item","Math","floor","random","then","onClick","mjolnir","CharList","props","characters","setCharacters","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","newCharacters","ended","onFocus","i","console","log","charRefs","current","classList","add","focus","onBlur","remove","useRef","renderItems","arr","character","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyDown","event","key","handleKeyPress","TransitionGroup","component","elements","useMemo","disabled","protoTypes","PropTypes","func","isRequired","comicses","end","to","resourceURI","substr","lastIndexOf","CharInfo","charId","ErrorBoundary","state","errorInfo","this","setState","children","SearchChar","initialValues","validationSchema","Yup","min","required","onSubmit","values","catch","type","placeholder","FindChar","text","setText","charData","setCharData","txt","renderChar","value","onChange","e","target","setTimeout","MainPage","selectedChar","setSelectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/5.a1830535.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n        return (\r\n                <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"img\" />\r\n        )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nlet _totalCharacters = 0;\r\nlet _totalComicses = 0;\r\n\r\n\r\nconst useMarvelService = () => {\r\n        const {request, clearError, process, setProcess} = useHttp();\r\n\r\n        const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n        const _apiKey = 'apikey=abf1ec76fa94d4d65de0b90e07426344';\r\n        const _baseOffset = 210;\r\n\r\n        const getAllCharactersClear = async (nameStart) => {\r\n                const res = await request(`${_apiBase}characters?nameStartsWith=${nameStart}&limit=100&${_apiKey}`);\r\n                return res.data.results.map(_transformCharacter);\r\n        }\r\n\r\n        const getAllCharacters = async (offset = _baseOffset) => {\r\n                const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n                _totalCharacters = res.data.total;\r\n                //console.log(_totalCharacters);\r\n                return res.data.results.map(_transformCharacter);\r\n        }\r\n\r\n        const getOneCharacters = async (id) => {\r\n                const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n                return _transformCharacter(res.data.results[0])\r\n        }\r\n\r\n        const getOneCharactersByName = async (name) => {\r\n                const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n                return _transformCharacter(res.data.results[0])\r\n        }\r\n\r\n        const getAllComicses = async (offset=0) => {\r\n                const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n                _totalComicses = res.data.total;\r\n                return res.data.results.map(_transformComics);\r\n        }\r\n\r\n        const getOneComics = async (id) => {\r\n                const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n                return _transformComics(res.data.results[0])\r\n        }\r\n\r\n        const _transformComics = (comics) => {\r\n                return{\r\n                        name: comics.title,\r\n                        price: comics.prices[0].price,\r\n                        id: comics.id,\r\n                        thumbnail: comics.images.length>0 ? comics.images[0].path+'.'+comics.images[0].extension : 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg',\r\n                        homepage: comics.urls[0].url,\r\n                        description: comics.description,\r\n                        pages: comics.pageCount,\r\n                        languages: comics.textObjects[0]?.language || 'en-US'\r\n                }\r\n        }\r\n\r\n        const _transformCharacter = (char) => {\r\n                return{\r\n                        name: char.name,\r\n                        description: char.description ,\r\n                        // ? (char.description.length > 200 ? char.description.slice(0,200)+'...' : char.description)  : 'No description',\r\n                        thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n                        homepage: char.urls[0].url,\r\n                        wiki: char.urls[1].url,\r\n                        id: char.id,\r\n                        comics: char.comics.items,\r\n                        total: char.total\r\n                }\r\n                // const charapter = {\r\n                //         name: char.name,\r\n                //         description: char.description,\r\n                //         thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n                //         homepage: char.urls[0].url,\r\n                //         wiki: char.urls[1].url\r\n                // }\r\n                // if (charapter.description.length>0 && charapter.description.length<200) {\r\n                //         return {...charapter}\r\n                // } else if (charapter.description.length>=200){\r\n                //         return {...charapter, description: charapter.description.slice(0,200)+'...'}\r\n                // } else {\r\n                //         return {...charapter, description: 'No description'}\r\n                // }\r\n        }\r\n\r\n        return {clearError, getAllCharacters, getOneCharacters, getAllComicses, getOneComics, getOneCharactersByName, getAllCharactersClear, process, setProcess}\r\n}\r\n\r\nexport default useMarvelService;\r\nexport {_totalCharacters, _totalComicses};","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n        \r\n        // const [loading, setLoading] = useState(false);\r\n        // const [error, setError] = useState(null);\r\n        const [process, setProcess] = useState('waiting')\r\n\r\n        const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n                // setLoading(true);\r\n                setProcess('loading');\r\n\r\n                try {\r\n                        const response = await fetch (url, {method, body, headers});\r\n\r\n                        if (!response.ok) {\r\n                                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n                        }\r\n\r\n                        const data = await response.json();\r\n\r\n                        // setLoading(false);\r\n\r\n                        return data;\r\n                } catch(e) {\r\n                        // setLoading(false);\r\n                        // setError(e.message);\r\n                        setProcess('error');\r\n                        throw e;\r\n                }\r\n        }, []);\r\n\r\n        const clearError = useCallback(() => {\r\n                // setError(null);\r\n                setProcess('loading');\r\n        }, [])\r\n\r\n        return {request, clearError, process, setProcess};\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <div>\n                <p className=\"char__select\">Please select a character to see information</p>\n                <div className=\"skeleton\">\n                    <div className=\"pulse skeleton__header\">\n                        <div className=\"pulse skeleton__circle\"></div>\n                        <div className=\"pulse skeleton__mini\"></div>\n                    </div>\n                    <div className=\"pulse skeleton__block\"></div>\n                    <div className=\"pulse skeleton__block\"></div>\n                    <div className=\"pulse skeleton__block\"></div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n        switch (process){\r\n                case 'waiting':\r\n                        return <Skeleton/>\r\n                case 'loading':\r\n                        return <Spinner/>\r\n                case 'confirmed':\r\n                        return <Component data={data}/>\r\n                case 'error':\r\n                        return <ErrorMessage/>\r\n                default:\r\n                        throw new Error('Unexpected process state')\r\n        }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\n\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n\tconst [char, setChar] = useState({});\n\n\tuseEffect(()=>{\n\t\tupdateChar();\n\t}, []);\n\n\tconst {loading, error, getOneCharacters, clearError, process, setProcess} = useMarvelService();\n\n\tconst onCharLoaded = (item) => {\n\t\tsetChar(char=>item);\t\n\t}\n\n\tconst updateChar = () => {\n\t\tclearError();\n\t\tconst id = Math.floor(Math.random()*(1011400-1011000)+1011000);\n\t\tgetOneCharacters(id)\n\t\t\t.then(onCharLoaded)\t//аргумент, что приходит от then автоматически подставляется в следом идущую функцию. В нашем случае, this.onCharLoaded\n\t\t\t.then(()=>setProcess('confirmed'))\n\t}\n\t\n\t// const errorMessage = error ? <ErrorMessage/> : null;\n\t// const spinner = loading ? <Spinner/> : null;\n\t// const content = !(loading || error) ? <View char={char}/> : null\n\n\treturn (\n\t\t<div className=\"randomchar\">\n\t\t\t{setContent(process, View, char)}\n\t\t\t{/* {errorMessage}\n\t\t\t{spinner}\n\t\t\t{content} */}\n\t\t\t{/*если компонент какой то возвращает null, то он не рендерится */}\n\t\t\t<div className=\"randomchar__static\">\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tRandom character for today!<br/>\n\t\t\t\t\tDo you want to get to know him better?\n\t\t\t\t</p>\n\t\t\t\t<p className=\"randomchar__title\">\n\t\t\t\t\tOr choose another one\n\t\t\t\t</p>\n\t\t\t\t<button className=\"button button__main\" onClick={updateChar}>\n\t\t\t\t\t<div className=\"inner\">try it</div>\n\t\t\t\t</button>\n\t\t\t\t<img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n\t\t\t</div>\n\t\t</div>\n\t)\t\n}\n\nconst View = ({data}) => {\n\tconst{name, description, thumbnail, homepage, wiki} = data\n\n\tconst clazzThumb = (thumbnail===('http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ? 'randomchar__img  randomchar__img-contains' : 'randomchar__img')\n\t\n\treturn (\n\t\t<div className=\"randomchar__block\">\n\t\t\t<img src={thumbnail} alt=\"Random character\" className={clazzThumb}/>\n\t\t\t<div className=\"randomchar__info\">\n\t\t\t\t<p className=\"randomchar__name\">{name}</p>\n\t\t\t\t<p className=\"randomchar__descr\">\n\t\t\t\t\t{description ? (description.length>130 ? description.slice(0,130)+'...' : description) : 'No description'}\n\t\t\t\t</p>\n\t\t\t\t<div className=\"randomchar__btns\">\n\t\t\t\t\t<a href={homepage} className=\"button button__main\">\n\t\t\t\t\t\t<div className=\"inner\">homepage</div>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a href={wiki} className=\"button button__secondary\">\n\t\t\t\t\t\t<div className=\"inner\">Wiki</div>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default RandomChar;","import './charList.scss';\n\nimport {useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types'\n\nimport useMarvelService from '../../services/MarvelService';\nimport { _totalCharacters } from '../../services/MarvelService';\n\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\n\nconst setContent = (process, Component, newItemLoading) => {\n        switch (process){\n                case 'waiting':\n                        return <Spinner/>\n                case 'loading':\n                        return newItemLoading ? <Component/> : <Spinner/>\n                case 'confirmed':\n                        return <Component/>\n                case 'error':\n                        return <ErrorMessage/>\n                default:\n                        throw new Error('Unexpected process state')\n        }\n}\n\n\n\nconst CharList = (props) => {\n\n        const [characters, setCharacters] = useState([]);\n        const [newItemLoading, setNewItemLoading] = useState(false);\n        const [offset, setOffset] = useState(1500);\n        const [charEnded, setCharEnded] = useState(false);\n        \n\n        const {loading, error, getAllCharacters, process, setProcess} = useMarvelService();\n        \n        // useEffect(()=>{\n        //         window.addEventListener('scroll', showByScroll);  \n        //         return () => {\n        //                 window.removeEventListener('scroll', showByScroll)\n        //         }\n        // }, [])  //когда мы в зависимостях оставляем пустой массив, у нас данный useEffects выполнится лишь один раз при создании данного компонента. Аналог componentDidMount(). return - аналог componentDidUnmount()\n        \n        useEffect(() => {                \n                onRequest(true);\n        }, []);\n\n        // useEffect(() => {\n        //         if (newItemLoading && !charEnded) {\n        //             onRequest();\n        //             //console.log(1)\n        //         }                \n        // }, [newItemLoading]);\n\n        // const showByScroll = () => {\n        //         if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight - 1) {\n        //                setNewItemLoading(true);\n        //         }\n        // }\n\n        const onRequest = (initial) => {                \n                initial ? setNewItemLoading(false) : setNewItemLoading(true);\n                //console.log(newItemLoading);\n                getAllCharacters(offset)\n                        .then(onCharLoaded)        //аргумент, что приходит от then автоматически подставляется в следом идущую функцию. В нашем случае, this.onCharLoaded\n                        .then(()=>setProcess('confirmed'))\n                        //.then(()=>onFocus(0))\n                        //.finally(()=>setNewItemLoading(false))\n        }\n\n        const onCharLoaded = (newCharacters) => {\n\n                let ended = _totalCharacters - offset <= 9;       //Если персонажи для отображения закончились, то меняем булиновое значение ended                \n                setCharacters(characters => [...characters, ...newCharacters]);\n                setNewItemLoading(newItemLoading=>false)\n                setOffset(offset => offset+9);\n                setCharEnded(charEnded => ended);                \n\t}\n        \n\n        const onFocus = (i=0) =>{\n                console.log('Элемент номер: '+ i)\n                charRefs.current[i].classList.add('char__item_selected');  \n                charRefs.current[i].focus();         \n        }\n\n        const onBlur = (i) =>{\n                charRefs.current[i].classList.remove('char__item_selected');\n        }\n\n        let charRefs = useRef([]);\n\n        //отслеживание нажатия кнопки\n        const handleKeyPress = (event, i, id) => {\n                console.log('Длина массива: ' + characters.length)\n                if (event.key==='Enter') {\n                        props.onCharSelected(id)   \n                }\n                if (event.key==='ArrowDown') {\n                        if ((characters.length-i-1)>=3) {\n                                onFocus(i+3);\n                                onBlur(i);\n                        }\n                        else {\n                                onBlur(i);\n                                onFocus(characters.length-1);\n                        }\n                }\n                if (event.key === 'ArrowUp') {\n                        if (i < 3) {\n                                onBlur(i);\n                                onFocus(0);\n                        }\n                        else {\n                                onBlur(i);                        \n                                onFocus(i-3);\n                        }\n                }\n                if (event.key==='ArrowLeft') {\n                        if(i===0){\n                                onBlur(i);\n                                onFocus(0);\n                        }\n                        else {\n                                onBlur(i);                        \n                                onFocus(i-1);\n                        }\n                }\n                if (event.key==='ArrowRight') {\n                        if ((characters.length-i-1) >= 1) {\n                                onFocus(i+1);\n                                onBlur(i);\n                        }\n                        else {\n                                onBlur(i);\n                                onFocus(characters.length-1);\n                        }\n                }\n        }\n\n        function renderItems(arr) {\n                const character = arr.map(({name, thumbnail,id}, i)=>{\n                        const clazzThumb = (thumbnail===('http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ? 'unset' : 'cover')\n                        return (\n                                <CSSTransition\n                                        key={i}\n                                        timeout={300+Math.random()*1000}\n                                        classNames=\"char__item\"\n                                >\n                                        <li \n                                                tabIndex={i} \n                                                className=\"char__item\" \n                                                key={id} \n                                                ref={el => charRefs.current[i] = el}                                \n                                                onBlur = {()=>onBlur(i)}\n                                                onFocus = {()=>onFocus(i)}\n                                                onClick={() =>props.onCharSelected(id)}\n                                                onKeyDown={(event)=>handleKeyPress(event, i, id)}>\n                                                <img src={thumbnail} alt={name} style={{objectFit: `${clazzThumb}`}}/>\n                                                <div className=\"char__name\">{name}</div>\n                                        </li>\n                                </CSSTransition>\n                        )\n                })\n                return (\n                        <ul className=\"char__grid\">\n                                <TransitionGroup component={null}>\n                                        {character}\n                                </TransitionGroup>                                \n                        </ul> \n                )\n        }\n\n        // const items = renderItems(characters)\n\n        // const errorMessage = error ? <ErrorMessage/> : null;\n        // const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n        // if (loading) {\n        //         import('./someFunc')\n        //                 .then(obj => obj.default())\n        //                 .catch();\n        // }\n\n        const elements = useMemo(()=>{\n                return setContent(process, ()=>renderItems(characters), newItemLoading);\n        }, [process])\n\n        return (\n                <div className=\"char__list\">\n                        {elements}\n                        <button \n                                className=\"button button__main button__long\"\n                                disabled={newItemLoading}\n                                style={{'display': charEnded ? 'none' : 'block'}}\n                                onClick={()=>onRequest()}\n                        >\n                                <div className=\"inner\">load more</div>\n                        </button>\n                </div>\n        )        \n}\n\nCharList.protoTypes = {\n        onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\n\nimport './charInfo.scss';\nimport setContent from '../../utils/setContent';\n// import Spinner from '../spinner/Spinner';\n// import ErrorMessage from '../errorMessage/ErrorMessage';\n// import Skeleton from '../skeleton/Skeleton';\n\nconst CharInfo = (props) => {\n\n        const [char, setChar] = useState(null);\n\n        const {loading, error, getOneCharacters, clearError, process, setProcess} =  useMarvelService();\n\n        useEffect(()=>{\n                updateChar();\n        }, [props.charId]);\n\n\n        const onCharLoaded = (item) => {\n                setChar(char=>item);\t\t\n\t}\n\n        const updateChar = () => {\n                const {charId} = props;\n                if(!charId){\n                        return;\n                }\n                clearError();\n                getOneCharacters(charId)\n                        .then(onCharLoaded)\n                        .then(()=>setProcess('confirmed'))\n        }\n\n        // const skeleton = char || loading || error ? null: <Skeleton/>\n        // const errorMessage = error ? <ErrorMessage/> : null;\n        // const spinner = loading ? <Spinner/> : null;\n        // const content = !(loading || error || !char) ? <View char={char}/> : null\n\n        return (\n                <>\n                        <div className=\"char__info\">\n                                {setContent(process, View,  char)}\n                                {/* {skeleton}\n                                {errorMessage}\n                                {spinner}\n                                {content}*/}\n                        </div>                        \n                </>\n        )        \n}\n\n\nconst View = ({data}) => {\n        const {name, description, thumbnail, homepage, wiki, comics} = data;\n        let comicses;\n        if (comics.length>0){\n                comicses = comics.slice(0,10).map((item, i) => {                        \n                        return(\n                                <li key={i} className=\"char__comics-item\">\n                                        <NavLink end to={`/comics/${(item.resourceURI).substr((item.resourceURI).lastIndexOf('/')+1)}`}>{item.name}</NavLink>\n                                        {item.name}                                                           \n                                </li>      \n                        )                        \n                })\n        } else {\n                comicses = 'No comics'\n        }\n\n        const clazzThumb = (thumbnail===('http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ? 'unset' : 'cover')\n\n        return(\n                <>\n                        <div className=\"char__basics\">\n                                <img src={thumbnail} alt={name} style={{objectFit: `${clazzThumb}`}}/>\n                                <div>\n                                        <div className=\"char__info-name\">{name}</div>\n                                        <div className=\"char__btns\">\n                                                <a href={homepage} className=\"button button__main\">\n                                                        <div className=\"inner\">homepage</div>\n                                                </a>\n                                                <a href={wiki} className=\"button button__secondary\">\n                                                        <div className=\"inner\">Wiki</div>\n                                                </a>\n                                        </div>\n                                </div>\n                        </div>\n                        <div className=\"char__descr\">\n                                {description ? (description.length>500 ? description.slice(0,500)+'...' : description) : 'No description'}\n                        </div>\n                        <div className=\"char__comics\">Comics:</div>\n                        <ul className=\"char__comics-list\">\n                                {\n                                        comicses\n                                }                            \n                        </ul>\n                </>\n        )\n}\n\nCharInfo.propTypes = {\n        charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component{\r\n        state = {\r\n                error: false\r\n        }\r\n\r\n        componentDidCatch(error, errorInfo){\r\n                console.log(error, errorInfo);\r\n                this.setState({\r\n                        error: true\r\n                })\r\n        }\r\n        \r\n        render(){\r\n                if(this.state.error){\r\n                        return <ErrorMessage/>\r\n                }\r\n                return this.props.children;\r\n        }\r\n}\r\nexport default ErrorBoundary;","import { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './searchChar.scss';\r\n\r\nconst SearchChar = () => {\r\n        const  { getOneCharactersByName, process, setProcess} = useMarvelService()\r\n\r\n        const [char, setChar] = useState(null);\r\n\r\n        const onCharLoaded = (item) => {\r\n                setChar(char=>item);\r\n                \r\n\t}\r\n\r\n        return(\r\n                <Formik\r\n                initialValues={{\r\n                        name: '',\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                        name: Yup.string()\r\n                                                .min(3, 'Please, enter minimum three chars')\r\n                                                .required('Please, enter name of your character')\r\n                })}\r\n                onSubmit = {values => getOneCharactersByName(values.name)\r\n                        .then(data => onCharLoaded(data))\r\n                        .then(()=>setProcess('confirmed'))\r\n                        .catch(()=>setChar('Not found'))}\r\n                        >\r\n                        <Form className=\"searchChar\">\r\n                                <h2 className=\"searchChar__header\">Or find your character by name:</h2>\r\n                                <div className=\"searchChar__inputBtn\">\r\n                                        <div className=\"searchChar__input\">\r\n                                                <Field\r\n                                                        id=\"name\"\r\n                                                        name=\"name\"\r\n                                                        type=\"text\"\r\n                                                        placeholder=\"Enter name\"/>                                                \r\n                                                <ErrorMessage className=\"error\" name=\"name\" component=\"div\"/>\r\n                                        </div>\r\n                                        <button className='button button__main' type=\"submit\" disabled={process==='loading'}>\r\n                                                <div className=\"inner\">Find</div>\r\n                                        </button>                                        \r\n                                </div>\r\n                                {char===null ? null : (char==='Not found' ? <div className=\"searchChar__title\"><h2 className='searchChar__title_error'>The charapter not found. Check the name and try again</h2></div> : \r\n                                (<div className='searchChar__title'>\r\n                                        <h2 className='searchChar__title_done'>There is! Visit {char.name} page?</h2>\r\n                                        <NavLink end to={`/character/${char.id}`}>\r\n                                                <button className='button button__main' >\r\n                                                        <div className=\"inner\">To page</div>\r\n                                                </button>\r\n                                        </NavLink>\r\n                                </div>))}\r\n                        </Form>\r\n                </Formik>\r\n        )\r\n}\r\n\r\nexport default SearchChar;","import { useState, useMemo, useEffect } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport './findCharPanel.scss'\r\n\r\nconst FindChar = () => {\r\n\r\n        const [text, setText] = useState('');\r\n        const [charData, setCharData] = useState({});        \r\n\r\n        const {loading, error, getAllCharactersClear} = useMarvelService();\r\n\r\n        useEffect(()=>{\r\n                onRequest(text)\r\n        }, [text])\r\n\r\n        const onRequest = (txt) => {\r\n                if(!txt){\r\n                        return\r\n                }\r\n                getAllCharactersClear(txt)\r\n                .then((data)=>setCharData(data))\r\n        }\r\n\r\n        const renderChar = (data) => {\r\n                if(!data.length){\r\n                        return\r\n                }\r\n                const character = data.map(({name, thumbnail, id}, i)=>{\r\n                        return (\r\n                                <NavLink  className=\"findChar__wrapper\" key={i} end to={`/character/${id}` }>\r\n                                        <img src={thumbnail} alt={name} className=\"findChar__img\" />\r\n                                        <div className=\"findChar__name\">{name}</div>\r\n                                </NavLink>\r\n                        )\r\n                })\r\n                return (\r\n                        <>\r\n                                {character}\r\n                        </> \r\n                )\r\n        }\r\n\r\n        const items = renderChar(charData)\r\n\r\n        return(\r\n                <div className=\"findChar\">\r\n                        <div className=\"container\">\r\n                                <div className=\"findChar__list\">\r\n                                        <input \r\n                                                value={text} \r\n                                                type='text' \r\n                                                onChange={(e)=>setText(e.target.value)}\r\n                                                onBlur={()=>setTimeout(()=>setText(''), 150)}\r\n                                                placeholder='Find your hero there...'\r\n                                        />\r\n                                        {text.length === 0 ? null : \r\n                                        <div className=\"findChar__result\">{error ? 'Error! Please, try again...' : (loading ? 'loading...' : (items ? items : 'No found this character'))}</div>}\r\n                                </div>\r\n                        </div>\r\n                </div>        \r\n        )\r\n}\r\n\r\nexport default FindChar","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\"\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport SearchChar from \"../searchChar/SearchChar\";\r\nimport FindChar from \"../findCharPanel/FindCharPanel\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n        const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n\r\n        const onCharSelected = (id) => {\r\n                setSelectedChar(id);\r\n        }\r\n\r\n        return(\r\n                <>\r\n                         <Helmet>        {/*задаем мета теги для главной страницы отдельно */}\r\n                                <meta\r\n                                        name=\"description\"\r\n                                        content=\"Marvel information portal\"\r\n                                        />\r\n                                <title>Marvel information portal</title>\r\n                        </Helmet>\r\n                         <ErrorBoundary>\r\n                                <RandomChar/>\r\n                        </ErrorBoundary>\r\n                        <ErrorBoundary>\r\n                                <FindChar/>\r\n                        </ErrorBoundary>\r\n                        <div className=\"char__content\">\r\n                                <ErrorBoundary>\r\n                                        <CharList onCharSelected={onCharSelected}/>\r\n                                </ErrorBoundary>\r\n                                <div className=\"char__stick\">\r\n                                        <ErrorBoundary>\r\n                                                <CharInfo charId={selectedChar}/>\r\n                                        </ErrorBoundary>\r\n                                        <ErrorBoundary>\r\n                                                <SearchChar/>\r\n                                        </ErrorBoundary>\r\n                                </div>\r\n                        </div>\r\n                        <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n                </>\r\n        )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}